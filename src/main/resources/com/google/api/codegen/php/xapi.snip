@extends "../common.snip"

@snippet generate(xapiClass)
    <?php

    namespace {@xapiClass.packageName};

    @join import : xapiClass.imports
        use {@import};
    @end

    class {@xapiClass.name}
    {
        {@constants(xapiClass)}
        {@statics(xapiClass)}
        {@members()}
        {@staticFunctions(xapiClass)}
        {@constructor(xapiClass)}
        {@apiMethods(xapiClass)}
        {@cleanupSection()}
    }
@end

@private constants(xapiClass)
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = '{@xapiClass.serviceAddress}';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = {@xapiClass.servicePort};

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    const _GAX_VERSION = '0.1.0';
    const _CODEGEN_NAME = 'GAPIC';
    const _CODEGEN_VERSION = '0.0.0';
    {@""}
@end

@private statics(xapiClass)
    @join pathTemplate : xapiClass.pathTemplates
        private static ${@pathTemplate.name};
    @end
    {@BREAK}
@end

@private members()
    private $grpcBootstrap;
    private $stub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;
    {@""}
@end

@private staticFunctions(xapiClass)
    @join function : xapiClass.formatResourceFunctions
        {@formatResourceFunction(function)}
    @end
    {@""}
    @join function : xapiClass.parseResourceFunctions
        {@parseResourceFunction(function)}
    @end
    {@""}
    @join function : xapiClass.pathTemplateGetterFunctions
        {@pathTemplateGetterFunction(function)}
    @end
    {@""}
    {@pageStreamingDescriptorFunction(xapiClass)}
@end

@private formatResourceFunction(function)
    /**
     * Formats a string containing the fully-qualified path to represent
     * a {@function.entityName} resource.
     */
    public static function {@function.name}(\
          {@formatResourceFunctionParams(function.resourceIdParams)})
    {
        return self::{@function.pathTemplateGetterName}()->render([
            {@pathTemplateArgs(function.resourceIdParams)},
        ]);
    }
    {@""}
@end

@private formatResourceFunctionParams(resourceIdParams)
    @join param : resourceIdParams on ", "
        ${@param.name}
    @end
@end

@private pathTemplateArgs(resourceIdParams)
    @join param : resourceIdParams on ",".add(BREAK)
        '{@param.templateKey}' => ${@param.name}
    @end
@end

@private parseResourceFunction(function)
    /**
     * Parses the {@function.outputResourceId} from the given fully-qualified path which
     * represents a {@function.entityName} resource.
     */
    public static function {@function.name}(${@function.entityNameParamName})
    {
        return self::{@function.pathTemplateGetterName}()\
            ->match(${@function.entityNameParamName})['{@function.outputResourceId}'];
    }
    {@""}
@end

@private pathTemplateGetterFunction(function)
    private static function {@function.name}()
    {
        if (self::${@function.pathTemplateName} == null) {
            self::${@function.pathTemplateName} = new PathTemplate('{@function.pattern}');
        }

        return self::${@function.pathTemplateName};
    }
    {@""}
@end

@private pageStreamingDescriptorFunction(xapiClass)
    private static function getPageStreamingDescriptors()
    {
        @join descriptor : xapiClass.pageStreamingDescriptors
            ${@descriptor.varName} =
                    new PageStreamingDescriptor([
                        'requestPageTokenField' => '{@descriptor.requestTokenFieldName}',
                        'responsePageTokenField' => '{@descriptor.responseTokenFieldName}',
                        'resourceField' => '{@descriptor.resourcesFieldName}',
                    ]);
        @end

        $pageStreamingDescriptors = [
            @join descriptor : xapiClass.pageStreamingDescriptors
                '{@descriptor.methodName}' => ${@descriptor.varName},
            @end
        ];

        return $pageStreamingDescriptors;
    }
    {@""}
@end

@private constructor(xapiClass)
    // TODO(garrettjones): add channel (when supported in gRPC)
    /**
     * Constructor.
     *
     * @@param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @@var string $serviceAddress The domain name of the API remote host.
     *                                  Default '{@xapiClass.serviceAddress}'.
     *     @@var mixed $port The port on which to connect to the remote host. Default {@xapiClass.servicePort}.
     *     @@var Grpc\ChannelCredentials $sslCreds
     *           A `ChannelCredentials` for use with an SSL-enabled channel.
     *           Default: a credentials object returned from
     *           Grpc\ChannelCredentials::createSsl()
     *     @@var array $scopes A string array of scopes to use when acquiring credentials.
     *                         Default the scopes for the {@xapiClass.serviceTitle}.
     *     @@var array $retryingOverride
     *           An associative array of string => RetryOptions, where the keys
     *           are method names (e.g. 'createFoo'), that overrides default retrying
     *           settings. A value of null indicates that the method in question should
     *           not retry.
     *     @@var int $timeoutMillis The timeout in milliseconds to use for calls
     *                              that don't use retries. For calls that use retries,
     *                              set the timeout in RetryOptions.
     *                              Default: 30000 (30 seconds)
     *     @@var string $appName The codename of the calling service. Default 'gax'.
     *     @@var string $appVersion The version of the calling service.
     *                              Default: the current version of GAX.
     * }
     */
    public function __construct($options = [])
    {
        $defaultScopes = [
            @join scope : {@xapiClass.authScopes}
                '{@scope}',
            @end
        ];
        $defaultOptions = [
            'serviceAddress' => self::SERVICE_ADDRESS,
            'port' => self::DEFAULT_SERVICE_PORT,
            'scopes' => $defaultScopes,
            'retryingOverride' => null,
            'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
            'appName' => 'gax',
            'appVersion' => self::_GAX_VERSION,
        ];
        $options = array_merge($defaultOptions, $options);

        $headerDescriptor = new AgentHeaderDescriptor([
            'clientName' => $options['appName'],
            'clientVersion' => $options['appVersion'],
            'codeGenName' => self::_CODEGEN_NAME,
            'codeGenVersion' => self::_CODEGEN_VERSION,
            'gaxVersion' => self::_GAX_VERSION,
            'phpVersion' => phpversion(),
        ]);

        $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
        $this->descriptors = [
            @join methodKey : xapiClass.methodKeys
                '{@methodKey}' => $defaultDescriptors,
            @end
        ];
        $pageStreamingDescriptors = self::getPageStreamingDescriptors();
        foreach ($pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
            $this->descriptors[$method]['pageStreamingDescriptor'] = $pageStreamingDescriptor;
        }

        // TODO load the client config in a more package-friendly way
        $clientConfigJsonString = file_get_contents('{@xapiClass.clientConfigPath}');
        $clientConfig = json_decode($clientConfigJsonString, true);
        $this->defaultCallSettings =
                CallSettings::load('{@xapiClass.interfaceKey}',
                                   $clientConfig,
                                   $options['retryingOverride'],
                                   GrpcConstants::getStatusCodeNames(),
                                   $options['timeoutMillis']);

        $this->scopes = $options['scopes'];

        $generatedCreateStub = function ($hostname, $opts) {
            return new {@xapiClass.grpcClientTypeName}($hostname, $opts);
        };
        $createStubOptions = [];
        if (!empty($options['sslCreds'])) {
            $createStubOptions['sslCreds'] = $options['sslCreds'];
        }
        $this->grpcBootstrap = GrpcBootstrap::defaultInstance();
        $this->stub = $this->grpcBootstrap->createStub(
            $generatedCreateStub,
            $options['serviceAddress'],
            $options['port'],
            $createStubOptions);
    }
    {@""}
@end

@private apiMethods(xapiClass)
    @join apiMethod : xapiClass.apiMethods
        {@methodDoc(apiMethod.doc)}
        public function {@apiMethod.name}({@paramList(apiMethod.methodParams)})
        {
            $request = new {@apiMethod.requestTypeName}();
            @join param : apiMethod.requiredRequestObjectParams
                {@setRequiredFieldCall(param)}
            @end
            @join param : apiMethod.optionalRequestObjectParams
                {@setOptionalFieldCall(param)}
            @end

            $mergedSettings = $this->defaultCallSettings['{@apiMethod.key}']->merge(
                new CallSettings($callSettings));
            $callable = ApiCallable::createApiCall(
                $this->stub, '{@apiMethod.grpcMethodName}', $mergedSettings, $this->descriptors['{@apiMethod.key}']);

            return $callable(
                $request,
                [],
                ['call_credentials_callback' => $this->createCredentialsCallback()]);
        }
        {@""}
    @end
@end

@private paramList(params)
    @join param : params on ", "
        @if param.defaultValue
            ${@param.name} = {@param.defaultValue}
        @else
            ${@param.name}
        @end
    @end
@end

@private setRequiredFieldCall(param)
    @if param.isMap
        foreach (${@param.name} as $key => $value) {
            $request->{@param.setCallName}((new {@param.elementTypeName}())->setKey($key)->setValue($value));
        }
    @else
        @if param.isArray
            foreach (${@param.name} as $elem) {
                $request->{@param.setCallName}($elem);
            }
        @else
            $request->{@param.setCallName}(${@param.name});
        @end
    @end
@end

@private setOptionalFieldCall(param)
    if (isset($optionalArgs['{@param.name}'])) {
        @if param.isMap
            // TODO make this work
            putAll...
        @else
            @if param.isArray
                foreach ($optionalArgs['{@param.name}'] as $elem) {
                    $request->{@param.setCallName}($elem);
                }
            @else
                $request->{@param.setCallName}($optionalArgs['{@param.name}']);
            @end
        @end
    }
@end

@private methodDoc(apiMethodDoc)
    /**
    @join commentLine : apiMethodDoc.mainDocLines
        {@""} * {@commentLine}
    @end
     *
     * Sample code:
     * ```
    #{@createMethodSampleDoc(service, method)}
     * ```
    @if apiMethodDoc.paramDocs
        {@""} *
        @join doc : apiMethodDoc.paramDocs
            {@paramDoc(doc)}
        @end
    @end
    @if apiMethodDoc.returnTypeName
        {@""} *
         * @@return {@apiMethodDoc.returnTypeName} 
    @end
     * 
     * @@throws Google\GAX\ApiException if the remote call fails
     */
@end

@private paramDoc(doc)
    @switch doc.getClass.getSimpleName
    @case "SimpleParamDocView"
        {@simpleParamDoc(doc)}
    @case "MapParamDocView"
        {@mapParamDoc(doc)}
    @default
        $unhandledCase: {@doc.getClass.getSimpleName}$
    @end
@end

@private simpleParamDoc(doc)
    {@""} * @@param {@doc.typeName} ${@doc.paramName} {@doc.firstLine}
    @if doc.remainingLines
        @join commentLine : doc.remainingLines
            {@""} * {@commentLine}
        @end
    @end
@end

@private mapParamDoc(doc)
    {@""} * @@param {@doc.typeName} ${@doc.paramName} {
     *     {@doc.firstLine}
    @if doc.remainingLines
        @join commentLine : doc.remainingLines
            {@""} *     {@commentLine}
        @end
    @end
    @if doc.arrayKeyDocs
        @join simpleParamDoc : doc.arrayKeyDocs
            {@""} *     @@var {@simpleParamDoc.typeName} ${@simpleParamDoc.paramName}
             *          {@simpleParamDoc.firstLine}
            @if simpleParamDoc.remainingLines
                @join commentLine : simpleParamDoc.remainingLines
                    {@""} *          {@commentLine}
                @end
            @end
        @end
    @end
     * }
@end

@private cleanupSection()
    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     */
    public function close()
    {
        $this->stub->close();
    }

    private function createCredentialsCallback()
    {
        return $this->grpcBootstrap->createCallCredentialsCallback($this->scopes);
    }
@end
