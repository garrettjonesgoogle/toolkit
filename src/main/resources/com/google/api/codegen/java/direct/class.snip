
@snippet generateClass(javaClass)
  package {@javaClass.packageName};

  {@joinWithSpace(javaClass.qualifiers)} \
  class {@javaClass.name} implements {@joinTypes(javaClass.implementsList)} {
    {@classComponents(javaClass.classComponents)}
  }
@end

@private classComponents(components)
  @join field : components
    @if field.initialization
      {@fieldDeclaration(field)} = {@field.initialization};
    @else
      {@fieldDeclaration(field)};
    @end
  @end
@end

@private fieldDeclaration(field)
  {@joinWithSpace(field.qualifiers)} {@javaType(field.type)} {@field.name}
@end

@private joinWithSpace(collection)
  @join element : collection on " "
    {@element}
  @end
@end

@private joinTypes(types)
  @join type : types on ", "
    {@javaType(type)}
  @end
@end

@private javaType(type)
  @if type.parameterizedTypes
    {@type.name}<{@joinTypes(type.parameterizedTypes)}>
  @else
    {@type.name}
  @end
@end
