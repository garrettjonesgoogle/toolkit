@snippet generate(xapiClass)
  package {@xapiClass.packageName};

  @join import : xapiClass.imports
    import {@import};
  @end

  @@javax.annotation.Generated("by GAPIC")
  public class {@xapiClass.name} implements AutoCloseable {
    {@members(xapiClass)}
    {@statics(xapiClass)}
    {@staticFunctions(xapiClass)}
    {@constructors(xapiClass)}
    {@apiMethods(xapiClass)}
    {@cleanupSection()}
  }
@end

@private statics(xapiClass)
  @join pathTemplate : xapiClass.pathTemplates
    private static final PathTemplate {@pathTemplate.name} =
        PathTemplate.createWithoutUrlEncoding("{@pathTemplate.pattern}");
    {@""}
  @end
@end

@private staticFunctions(xapiClass)
  @join function : xapiClass.formatResourceFunctions
    {@formatResourceFunction(function)}
  @end
  {@""}
  @join function : xapiClass.parseResourceFunctions
    {@parseResourceFunction(function)}
  @end
@end

@private formatResourceFunction(function)
  /**
   * Formats a string containing the fully-qualified path to represent
   * a {@function.entityName} resource.
   */
  public static final String {@function.name}(\
      {@formatResourceFunctionParams(function.resourceIdParams)}) {
    return {@function.pathTemplateName}.instantiate(
        {@pathTemplateArgs(function.resourceIdParams)});
  }
  {@""}
@end

@private formatResourceFunctionParams(resourceIdParams)
  @join param : resourceIdParams on ", "
    String {@param.name}
  @end
@end

@private pathTemplateArgs(resourceIdParams)
  @join param : resourceIdParams on ",".add(BREAK)
    "{@param.templateKey}", {@param.name}
  @end
@end

@private parseResourceFunction(function)
  /**
   * Parses the {@function.outputResourceId} from the given fully-qualified path which
   * represents a {@function.entityName} resource.
   */
  public static final String {@function.name}(String {@function.entityNameParamName}) {
    return {@function.pathTemplateName}.parse({@function.entityNameParamName})\
      .get("{@function.outputResourceId}");
  }
  {@""}
@end

@private members(xapiClass)
  private final {@xapiClass.settingsClassName} settings;
  private final ManagedChannel channel;
  private final ScheduledExecutorService executor;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  @join apiCallable : xapiClass.apiCallableMembers
    @switch apiCallable.getClass.getSimpleName
    @case "SimpleApiCallableView"
      private final ApiCallable<{@apiCallable.inTypeName}, {@apiCallable.outTypeName}> {@apiCallable.name};
    @case "PagedApiCallableView"
      private final ApiCallable<{@apiCallable.inTypeName}, \
        {@apiCallable.pageAccessorTypeName}<{@apiCallable.resourceTypeName}>> {@apiCallable.name};
    @case "BundlingApiCallableView"
      private final ApiCallable<{@apiCallable.inTypeName}, {@apiCallable.outTypeName}> {@apiCallable.name};
    @default
      $unhandledCase: {@apiCallable.getClass.getSimpleName}$
    @end
    
  @end

  public final {@xapiClass.settingsClassName} getSettings() {
    return settings;
  }
  {@""}
@end

@private constructors(xapiClass)
  /**
   * Constructs an instance of {@xapiClass.name} with default settings.
   */
  public static final {@xapiClass.name} createWithDefaults() throws IOException {
    return create({@xapiClass.settingsClassName}.defaultBuilder().build());
  }

  /**
   * Constructs an instance of {@xapiClass.name}, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final {@xapiClass.name} create({@xapiClass.settingsClassName} settings) throws IOException {
    return new {@xapiClass.name}(settings);
  }

  /**
   * Constructs an instance of {@xapiClass.name}, using the given settings.
   * This is protected so that it easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected {@xapiClass.name}({@xapiClass.settingsClassName} settings) throws IOException {
    this.settings = settings;
    this.executor = settings.getExecutorProvider().getOrBuildExecutor();
    this.channel = settings.getChannelProvider().getOrBuildChannel(this.executor);

    @join apiCallable : xapiClass.apiCallableMembers
      @switch apiCallable.getClass.getSimpleName
      @case "SimpleApiCallableView"
        this.{@apiCallable.name} = ApiCallable.create(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
      @case "PagedApiCallableView"
        this.{@apiCallable.name} =
            ApiCallable.createPagedVariant(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
      @case "BundlingApiCallableView"
        this.{@apiCallable.name} = ApiCallable.create(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
        if (settings.{@apiCallable.settingsFunctionName}().getBundlerFactory() != null) {
          closeables.add(settings.{@apiCallable.settingsFunctionName}().getBundlerFactory());
        }
      @default
        $unhandledCase: {@apiCallable.getClass.getSimpleName}$
      @end
    @end

    if (settings.getChannelProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @@Override
          public void close() throws IOException {
            channel.shutdown();
          }
        });
    }
    if (settings.getExecutorProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @@Override
          public void close() throws IOException {
            executor.shutdown();
          }
        });
    }
  }
  {@""}
@end

@private apiMethods(xapiClass)
  @join apiMethod : xapiClass.apiMethods
    @switch apiMethod.getClass.getSimpleName
    @case "PagedFlattenedMethodView"
      {@pagedFlattenedMethod(apiMethod)}
    @case "PagedRequestObjectMethodView"
      {@pagedRequestObjectMethod(apiMethod)}
    @case "PagedCallableMethodView"
      {@pagedCallableMethod(apiMethod)}
    @case "UnpagedListCallableMethodView"
      {@unpagedListCallableMethod(apiMethod)}
    @case "FlattenedMethodView"
      {@flattenedMethod(apiMethod)}
    @case "RequestObjectMethodView"
      {@requestObjectMethod(apiMethod)}
    @case "CallableMethodView"
      {@callableMethod(apiMethod)}
    @default
      $unhandledCase: {@apiMethod.getClass.getSimpleName}$
    @end
    {@BREAK}
  @end
@end

@private cleanupSection()
  /**
   * Initiates an orderly shutdown in which preexisting calls continue but new calls are immediately
   * cancelled.
   */
  @@Override
  public final void close() throws Exception {
    for (AutoCloseable closeable : closeables) {
      closeable.close();
    }
  }

@end

@private pagedFlattenedMethod(apiMethod)
  @let coreSampleCode = pagedFlattenedMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decoratedSampleCode(apiMethod, coreSampleCode))}
  @end
  public final PageAccessor<{@apiMethod.resourceTypeName}> \
      {@apiMethod.name}({@paramList(apiMethod.methodParams)}) {
    @join pathTemplateCheck : apiMethod.pathTemplateChecks
      {@pathTemplateCheckLine(pathTemplateCheck)}
    @end
    {@apiMethod.requestTypeName} request =
        {@apiMethod.requestTypeName}.newBuilder()
        {@builderSetCalls(apiMethod.requestObjectParams)}
        .build();
    return {@apiMethod.name}(request);
  }
@end

@snippet pagedFlattenedMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  for ({@apiMethod.resourceTypeName} element : {@sampleSyncMethodCall(apiMethod)}) {
    // doThingsWith(element);
  }
@end

@private pagedRequestObjectMethod(apiMethod)
  @let coreSampleCode = pagedRequestObjectMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decoratedSampleCode(apiMethod, coreSampleCode))}
  @end
  {@apiMethod.accessModifier} final PageAccessor<{@apiMethod.resourceTypeName}> \
      {@apiMethod.name}({@apiMethod.requestTypeName} request) {
    return {@apiMethod.callableMethodName}()
        .call(request);
  }
@end

@private pagedRequestObjectMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  for ({@apiMethod.resourceTypeName} element : {@sampleSyncMethodCall(apiMethod)}) {
    // doThingsWith(element);
  }
@end

@private pagedCallableMethod(apiMethod)
  @let coreSampleCode = pagedCallableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decoratedSampleCode(apiMethod, coreSampleCode))}
  @end
  public final ApiCallable<{@apiMethod.requestTypeName}, PageAccessor<{@apiMethod.resourceTypeName}>> \
      {@apiMethod.name}() {
    return {@apiMethod.callableName};
  }
@end

@private pagedCallableMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  ListenableFuture<PageAccessor<{@apiMethod.resourceTypeName}>> future = {@sampleFutureMethodCall(apiMethod)};
  // Do something
  for ({@apiMethod.resourceTypeName} element : future.get()) {
    // doThingsWith(element);
  }
@end

@private unpagedListCallableMethod(apiMethod)
  @let coreSampleCode = unpagedListCallableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decoratedSampleCode(apiMethod, coreSampleCode))}
  @end
  public final ApiCallable<{@apiMethod.requestTypeName}, {@apiMethod.responseTypeName}> \
      {@apiMethod.name}() {
    return {@apiMethod.callableName};
  }
@end

@private unpagedListCallableMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  while (true) {
    {@apiMethod.responseTypeName} response = \
        {@apiMethod.apiVariableName}.{@apiMethod.name}().call(\
        {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)});
    for ({@apiMethod.resourceTypeName} element : response.{@apiMethod.getResourceListCall}()) {
      // doThingsWith(element);
    }
    String nextPageToken = response.getNextPageToken();
    if (!Strings.isNullOrEmpty(nextPageToken)) {
      request = request.toBuilder().setPageToken(nextPageToken).build();
    } else {
      break;
    }
  }
@end

@private flattenedMethod(apiMethod)
  @let coreSampleCode = flattenedMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decoratedSampleCode(apiMethod, coreSampleCode))}
  @end
  public final {@apiMethod.responseTypeName} {@apiMethod.name}(\
       {@paramList(apiMethod.methodParams)}) {
    @join pathTemplateCheck : apiMethod.pathTemplateChecks
      {@pathTemplateCheckLine(pathTemplateCheck)}
    @end
    {@apiMethod.requestTypeName} request =
        {@apiMethod.requestTypeName}.newBuilder()
        {@builderSetCalls(apiMethod.requestObjectParams)}
        .build();
    @if apiMethod.hasReturnValue
      return {@apiMethod.name}(request);
    @else
      {@apiMethod.name}(request);
    @end
  }
@end

@private flattenedMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = {@sampleSyncMethodCall(apiMethod)};
  @else
    {@sampleSyncMethodCall(apiMethod)};
  @end
@end

@private requestObjectMethod(apiMethod)
  @let coreSampleCode = requestObjectMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decoratedSampleCode(apiMethod, coreSampleCode))}
  @end
  {@apiMethod.accessModifier} final {@apiMethod.responseTypeName} \
      {@apiMethod.name}({@apiMethod.requestTypeName} request) {
    @if apiMethod.hasReturnValue
      return {@apiMethod.callableMethodName}().call(request);
    @else
      {@apiMethod.callableMethodName}().call(request);
    @end
  }
@end

@private requestObjectMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = {@sampleSyncMethodCall(apiMethod)};
  @else
    {@sampleSyncMethodCall(apiMethod)};
  @end
@end

@private callableMethod(apiMethod)
  @let coreSampleCode = callableMethodSampleCode(apiMethod)
    {@methodDoc(apiMethod.doc, decoratedSampleCode(apiMethod, coreSampleCode))}
  @end
  public final ApiCallable<{@apiMethod.requestTypeName}, {@apiMethod.responseTypeName}> \
      {@apiMethod.name}() {
    return {@apiMethod.callableName};
  }
@end

@private callableMethodSampleCode(apiMethod)
  {@initCode(apiMethod.initCode)}
  ListenableFuture<{@apiMethod.genericAwareResponseType}> future = {@sampleFutureMethodCall(apiMethod)};
  // Do something
  @if apiMethod.hasReturnValue
    {@apiMethod.responseTypeName} response = future.get();
  @else
    future.get();
  @end
@end

@snippet decoratedSampleCode(apiMethod, coreSampleCode)
  try ({@apiMethod.apiClassName} {@apiMethod.apiVariableName} = \
      {@apiMethod.apiClassName}.createWithDefaults()) {
    {@coreSampleCode}
  }
@end

@private sampleMethodCallArgList(fieldSettings)
  @join fieldSetting : fieldSettings on ", "
    {@fieldSetting.identifier}
  @end
@end

@private sampleFutureMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}().futureCall(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private sampleSyncMethodCall(apiMethod)
  {@apiMethod.apiVariableName}.{@apiMethod.name}(\
      {@sampleMethodCallArgList(apiMethod.initCode.fieldSettings)})
@end

@private methodDoc(apiMethodDoc, methodSampleCode)
  // AUTO-GENERATED DOCUMENTATION AND METHOD
  /**
  @join commentLine : apiMethodDoc.mainDocLines
    {@""} * {@commentLine} 
  @end
   *
   * Sample code:
   * <pre><code>
  @join sampleLine : util.getJavaDocLines(methodSampleCode)
    {@""} * {@sampleLine}
  @end
   * </code></pre>
  @if apiMethodDoc.paramDocs
    {@""} *
    @join doc : apiMethodDoc.paramDocs 
      {@paramDoc(doc)}
    @end
  @end
  @if apiMethodDoc.throwsDocLines
    @join commentLine : apiMethodDoc.throwsDocLines
      {@""} * {@commentLine}
    @end
  @end
   */
  {@EMPTY}
@end

@private paramDoc(doc)
  @switch doc.getClass.getSimpleName
  @case "SimpleParamDocView"
    {@simpleParamDoc(doc)}
  @default
    $unhandledCase: {@doc.getClass.getSimpleName}$
  @end
@end

@private simpleParamDoc(doc)
  {@""} * @@param {@doc.paramName} {@doc.firstLine}
  @if doc.remainingLines
    @join commentLine : doc.remainingLines
      {@""} * {@commentLine}
    @end
  @end
@end

@private builderSetCalls(requestObjectParams)
  @join requestObjectParam : requestObjectParams
    .{@requestObjectParam.setCallName}({@requestObjectParam.name})
  @end
@end

@private pathTemplateCheckLine(pathTemplateCheck)
  {@pathTemplateCheck.pathTemplateName}.validate({@pathTemplateCheck.paramName});
@end

@private initCode(initCodeSpec)
  @join line : initCodeSpec.lines
    @switch line.lineType.toString
    @case "StructureInitLine"
      {@initLineStructure(line)}
    @case "ListInitLine"
      {@initLineList(line)}
    @case "MapInitLine"
      {@initLineMap(line)}
    @case "SimpleInitLine"
      {@initLineSimple(line)}
    @default
      {@unhandledCase()}
    @end
  @end
@end

@private initLineStructure(line)
  {@line.typeName} {@line.identifier} = {@line.typeName}.newBuilder()
  @join fieldSetting : line.fieldSettings
    {@EMPTY}  .{@fieldSetting.setFunctionCallName}({@fieldSetting.identifier})
  @end
  {@EMPTY}  .build();
@end

@private initLineList(line)
  List<{@line.elementTypeName}> {@line.identifier} = \
      Arrays.asList({@argList(line.elementIdentifiers)});
@end

@private initLineMap(line)
  Map<{@line.keyTypeName}, {@line.valueTypeName}> {@line.identifier} = new HashMap<>();
  @join mapEntry : line.initEntries vertical
    {@line.identifier}.put({@mapEntry.key}, {@mapEntry.value});
  @end
@end

@private initLineSimple(line)
  {@line.typeName} {@line.identifier} = {@renderInitValue(line.initValue)};
@end

@private renderInitValue(initValue)
  @switch initValue.getClass.getSimpleName
  @case "SimpleInitValueView"
    {@initValue.initialValue}
  @case "FormattedInitValueView"
    {@initValue.apiWrapperName}.{@initValue.formatFunctionName}({@argList(initValue.formatArgs)})
  @default
    {@unhandledCase()}
  @end
@end

@private paramList(params)
  @join param : params on ", "
    {@param.typeName} {@param.name}
  @end
@end

@private argList(args)
  @join arg : args on ", "
    {@arg}
  @end
@end
