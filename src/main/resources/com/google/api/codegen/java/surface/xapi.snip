
@snippet generateClass(xapiClass)
  package {@xapiClass.packageName};

  @join import : xapiClass.imports
    import {@import};
  @end

  @@javax.annotation.Generated("by GAPIC")
  public class {@xapiClass.name} implements AutoCloseable {
    {@members(xapiClass)}
    {@resourceUtils(xapiClass)}
    {@constructors(xapiClass)}
    {@apiMethods(xapiClass)}
  }
@end

@private resourceUtils(xapiClass)
  {@pathTemplateConstants(xapiClass)}
  {@resourceFunctions(xapiClass)}
@end

@private pathTemplateConstants(xapiClass)
  @join pathTemplate : xapiClass.pathTemplates
    private static final PathTemplate {@pathTemplate.name} =
        PathTemplate.createWithoutUrlEncoding("{@pathTemplate.pattern}");
    {@""}
  @end
@end

@private resourceFunctions(xapiClass)
  @join function : xapiClass.formatResourceFunctions
    {@formatResourceFunction(function)}
  @end
  {@""}
  @join function : xapiClass.parseResourceFunctions
    {@parseResourceFunction(function)}
  @end
@end

@private formatResourceFunction(function)
  /**
   * Formats a string containing the fully-qualified path to represent
   * a {@function.entityName} resource.
   */
  public static final String {@function.name}(\
      {@formatResourceFunctionParams(function.resourceIdParams)}) {
    return {@function.pathTemplateName}.instantiate(
        {@pathTemplateArgs(function.resourceIdParams)});
  }
  {@""}
@end

@private formatResourceFunctionParams(resourceIdParams)
  @join param : resourceIdParams on ", "
    String {@param.name}
  @end
@end

@private pathTemplateArgs(resourceIdParams)
  @join param : resourceIdParams on ",".add(BREAK)
    "{@param.templateKey}", {@param.name}
  @end
@end

@private parseResourceFunction(function)
  /**
   * Parses the {@function.outputResourceId} from the given fully-qualified path which
   * represents a {@function.entityName} resource.
   */
  public static final String {@function.name}(String {@function.entityNameParamName}) {
    return {@function.pathTemplateName}.parse({@function.entityNameParamName})\
      .get("{@function.outputResourceId}");
  }
  {@""}
@end

@private members(xapiClass)
  private final {@xapiClass.settingsClassName} settings;
  private final ManagedChannel channel;
  private final ScheduledExecutorService executor;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  @join apiCallable : xapiClass.apiCallableMembers
    @switch apiCallable.getClass().getSimpleName()
    @case "JavaSimpleApiCallable"
      private final ApiCallable<{@apiCallable.inTypeName}, {@apiCallable.outTypeName}> {@apiCallable.name};
    @case "JavaPagedApiCallable"
      private final ApiCallable<{@apiCallable.inTypeName}, \
        {@apiCallable.pageAccessorTypeName}<{@apiCallable.resourceTypeName}>> {@apiCallable.name};
    @case "JavaBundlingApiCallable"
      private final ApiCallable<{@apiCallable.inTypeName}, {@apiCallable.outTypeName}> {@apiCallable.name};
    @default
      $unhandledCase: {@apiCallable.getClass.getSimpleName}$
    @end
    
  @end

  public final {@xapiClass.settingsClassName} getSettings() {
    return settings;
  }
  {@""}
@end

@private constructors(xapiClass)
  /**
   * Constructs an instance of {@xapiClass.name} with default settings.
   */
  public static final {@xapiClass.name} createWithDefaults() throws IOException {
    return create({@xapiClass.settingsClassName}.defaultBuilder().build());
  }

  /**
   * Constructs an instance of {@xapiClass.name}, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final {@xapiClass.name} create({@xapiClass.settingsClassName} settings) throws IOException {
    return new {@xapiClass.name}(settings);
  }

  /**
   * Constructs an instance of {@xapiClass.name}, using the given settings.
   * This is protected so that it easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected {@xapiClass.name}({@xapiClass.settingsClassName} settings) throws IOException {
    this.settings = settings;
    this.executor = settings.getExecutorProvider().getOrBuildExecutor();
    this.channel = settings.getChannelProvider().getOrBuildChannel(this.executor);

    @join apiCallable : xapiClass.apiCallableMembers
      @switch apiCallable.getClass().getSimpleName()
      @case "JavaSimpleApiCallable"
        this.{@apiCallable.name} = ApiCallable.create(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
      @case "JavaPagedApiCallable"
        this.{@apiCallable.name} =
            ApiCallable.createPagedVariant(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
      @case "JavaBundlingApiCallable"
        this.{@apiCallable.name} = ApiCallable.create(settings.{@apiCallable.settingsFunctionName}(), this.channel, this.executor);
        if (settings.{@apiCallable.settingsFunctionName}().getBundlerFactory() != null) {
          closeables.add(settings.{@apiCallable.settingsFunctionName}().getBundlerFactory());
        }
      @default
        $unhandledCase: {@apiCallable.getClass.getSimpleName}$
      @end
    @end

    if (settings.getChannelProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @@Override
          public void close() throws IOException {
            channel.shutdown();
          }
        });
    }
    if (settings.getExecutorProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @@Override
          public void close() throws IOException {
            executor.shutdown();
          }
        });
    }
  }
  {@""}
@end

@private apiMethods(xapiClass)
  @join apiMethod : xapiClass.apiMethods
    @switch apiMethod.getClass().getSimpleName()
    @case "JavaPagedFlattenedMethod"
      {@pagedFlattenedMethod(apiMethod)}
    @case "JavaPagedRequestObjectMethod"
      {@pagedRequestObjectMethod(apiMethod)}
    @case "JavaPagedCallableMethod"
      {@pagedCallableMethod(apiMethod)}
    @case "JavaUnpagedListCallableMethod"
      {@unpagedListCallableMethod(apiMethod)}
    @case "JavaFlattenedMethod"
      {@flattenedMethod(apiMethod)}
    @case "JavaRequestObjectMethod"
      {@requestObjectMethod(apiMethod)}
    @case "JavaCallableMethod"
      {@callableMethod(apiMethod)}
    @default
      $unhandledCase: {@apiMethod.getClass.getSimpleName}$
    @end
    {@BREAK}
  @end
@end

@private pagedFlattenedMethod(apiMethod)
  {@methodJavaDoc(apiMethod.doc)}
  public final PageAccessor<{@apiMethod.resourceTypeName}> \
      {@apiMethod.name}({@paramList(apiMethod.requestObjectParams)}) {
    @join pathTemplateCheck : apiMethod.pathTemplateChecks
      {@pathTemplateCheckLine(pathTemplateCheck)}
    @end
    {@apiMethod.requestTypeName} request =
        {@apiMethod.requestTypeName}.newBuilder()
        {@builderSetCalls(apiMethod.requestObjectParams)}
        .build();
    return {@apiMethod.name}(request);
  }
@end

@private pagedRequestObjectMethod(apiMethod)
  {@methodJavaDoc(apiMethod.doc)}
  {@apiMethod.accessModifier} final PageAccessor<{@apiMethod.resourceTypeName}> \
      {@apiMethod.name}({@apiMethod.requestTypeName} request) {
    return {@apiMethod.name}PagedCallable()
        .call(request);
  }
@end

@private pagedCallableMethod(apiMethod)
@end

@private unpagedListCallableMethod(apiMethod)
@end

@private flattenedMethod(apiMethod)
@end

@private requestObjectMethod(apiMethod)
@end

@private callableMethod(apiMethod)
@end

@private methodJavaDoc(apiMethodDoc)
  /**
  @join commentLine : apiMethodDoc.mainDocLines
    {@""} * {@commentLine} 
  @end
   *
   * Sample code:
   * <pre><code>
  #@join sampleLine : generateMethodSampleCode(apiMethodDoc)
  #  {@""} * {@sampleLine}
  #@end
  {@dummySample()}
   * </code></pre>
  @if apiMethodDoc.paramDocLines
    {@""} *
    @join commentLine : apiMethodDoc.paramDocLines 
      {@""} * {@commentLine}
    @end
  @end
  @if apiMethodDoc.throwsDocLines
    {@""} *
    @join commentLine : apiMethodDoc.throwsDocLines
      {@""} * {@commentLine}
    @end
  @end
   */
@end

@private paramList(params)
  @join param : params on ", "
    {@param.typeName} {@param.name}
  @end
@end

@private builderSetCalls(requestObjectParams)
  @join requestObjectParam : requestObjectParams
    .{@requestObjectParam.setCallName}({@requestObjectParam.name})
  @end
@end

@private pathTemplateCheckLine(pathTemplateCheck)
  {@pathTemplateCheck.pathTemplateName}.validate({@pathTemplateCheck.paramName});
@end

@private dummySample()
  {@""} * try {
   *
   * }
@end
