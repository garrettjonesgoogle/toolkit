
@snippet generateClass(xapiClass)
  @@javax.annotation.Generated("by GAPIC")
  public class {@xapiClass.name} implements AutoCloseable {
    {@members(xapiClass)}

    {@resourceUtils(xapiClass)}
  }
@end

@private resourceUtils(xapiClass)
  {@pathTemplateConstants(xapiClass)}
  {@resourceFunctions(xapiClass)}
@end

@private pathTemplateConstants(xapiClass)
  @join pathTemplate : xapiClass.pathTemplates
    private static final PathTemplate {@pathTemplate.name} =
        PathTemplate.createWithoutUrlEncoding("{@pathTemplate.pattern}");

  @end
@end

@private resourceFunctions(xapiClass)
  @join function : xapiClass.formatResourceFunctions
    {@formatResourceFunction(function)}
  @end
@end

@private formatResourceFunction(function)
  /**
   * Formats a string containing the fully-qualified path to represent
   * a {@function.entityName} resource.
   */
  public static final String {@function.name}(\
      {@formatResourceFunctionParams(function.resourceParams)}) {
    return {@function.pathTemplateName}.instantiate(
        {@pathTemplateArgs(function.resourceParams)});
  }

@end

@private formatResourceFunctionParams(resourceParams)
  @join param : resourceParams on ", "
    String {@param.name}
  @end
@end

@private pathTemplateArgs(resourceParams)
  @join param : resourceParams on ",".add(BREAK)
    "{@param.templateKey}", {@param.name}
  @end
@end

@private members(xapiClass)
  private final {@xapiClass.settingsClassName} settings;
  private final ManagedChannel channel;
  private final ScheduledExecutorService executor;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  @join apiCallable : xapiClass.apiCallableMembers
    @switch apiCallable.getClass().getSimpleName()
    @case "JavaSimpleApiCallable"
      private final ApiCallable<{@apiCallable.inTypeName}, {@apiCallable.outTypeName}> {@apiCallable.name};
    @case "JavaPagedApiCallable"
      private final ApiCallable<{@apiCallable.inTypeName}, \
        {@apiCallable.pageAccessorTypeName}<{@apiCallable.resourceTypeName}>> {@apiCallable.name};
    @default
      $unhandledCase: {@apiCallable.getClass.getSimpleName}$
    @end
    
  @end

  public final {@xapiClass.settingsClassName} getSettings() {
    return settings;
  }
@end
