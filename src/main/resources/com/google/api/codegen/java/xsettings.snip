@snippet generate(xsettingsClass)
  package {@xsettingsClass.packageName};
  
  @join import : xsettingsClass.imports
    import {@import};
  @end

  @@javax.annotation.Generated("by GAPIC")
  public class {@xsettingsClass.name} extends ServiceApiSettings {
    {@constants(xsettingsClass)}
    {@members(xsettingsClass)}
    {@constructors(xsettingsClass)}
    {@descriptors(xsettingsClass)}
  }
@end

@private constants(xsettingsClass)
  /**
   * The default address of the service.
   */
  public static final String DEFAULT_SERVICE_ADDRESS = "{@xsettingsClass.serviceAddress}";

  /**
   * The default port of the service.
   */
  public static final int DEFAULT_SERVICE_PORT = {@xsettingsClass.servicePort};

  /**
   * The default scopes of the service.
   */
  public static final ImmutableList<String> DEFAULT_SERVICE_SCOPES = ImmutableList.<String>builder()
      @join scope : {@xsettingsClass.authScopes}
        .add("{@scope}")
      @end
      .build();

  /**
   * The default connection settings of the service.
   */
  public static final ConnectionSettings DEFAULT_CONNECTION_SETTINGS =
      ConnectionSettings.newBuilder()
          .setServiceAddress(DEFAULT_SERVICE_ADDRESS)
          .setPort(DEFAULT_SERVICE_PORT)
          .provideCredentialsWith(DEFAULT_SERVICE_SCOPES)
          .build();
  {@""}
@end

@private members(xsettingsClass)
  {@methodMembers(xsettingsClass)}
  {@methodGetters(xsettingsClass)}
  /**
   * Returns a builder for this class with recommended defaults.
   */
  public static Builder defaultBuilder() {
    return Builder.createDefault();
  }

  /**
   * Returns a new builder for this class.
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Returns a builder containing all the values of this settings class.
   */
  public Builder toBuilder() {
    return new Builder(this);
  }
  {@""}
@end

@private methodMembers(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    @switch settings.type.toString
    @case "SimpleApiCallable"
      private final SimpleCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @case "PagedApiCallable"
      private final PageStreamingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, {@settings.resourceTypeName}> {@settings.memberName};
    @case "BundlingApiCallable"
      private final BundlingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.memberName};
    @default
      $unhandledCase: {@settings.type.toString}$
    @end
  @end
  {@BREAK}
@end

@private methodGetters(xsettingsClass)
  @join settings : xsettingsClass.callSettings
    /**
     * Returns the object with the settings used for calls to {@settings.methodName}.
     */
    @switch settings.type.toString
    @case "SimpleApiCallable"
        public SimpleCallSettings<{@settings.requestTypeName}, \
            {@settings.responseTypeName}> {@settings.fnGetterName}() {
          return {@settings.memberName};
       }
    @case "PagedApiCallable"
      public PageStreamingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}, {@settings.resourceTypeName}> {@settings.fnGetterName}() {
        return {@settings.memberName};
      }
    @case "BundlingApiCallable"
      public BundlingCallSettings<{@settings.requestTypeName}, \
          {@settings.responseTypeName}> {@settings.fnGetterName}() {
        return {@settings.memberName};
      }
    @default
      $unhandledCase: {@settings.type.toString}$
    @end
    {@""}
  @end
@end

@private constructors(xsettingsClass)
  private {@xsettingsClass.name}(Builder settingsBuilder) throws IOException {
    super(settingsBuilder.getChannelProvider(),
          settingsBuilder.getExecutorProvider(),
          settingsBuilder.getGeneratorName(),
          settingsBuilder.getGeneratorVersion(),
          settingsBuilder.getClientLibName(),
          settingsBuilder.getClientLibVersion());

    @join settings : xsettingsClass.callSettings
      {@settings.memberName} = settingsBuilder.{@settings.fnGetterName}().build();
    @end
  }
  {@""}
@end

@private descriptors(xsettingsClass)
  {@pageStreamingDescriptors(xsettingsClass)}
  {@bundlingDescriptors(xsettingsClass)}
@end

@private pageStreamingDescriptors(xsettingsClass)
  @join desc : xsettingsClass.pageStreamingDescriptors
    private static PageStreamingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}, {@desc.resourceTypeName}> {@desc.name} =
        new PageStreamingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}, {@desc.resourceTypeName}>() {
          @@Override
          public Object emptyToken() {
            return {@desc.defaultTokenValue};
          }
          @@Override
          public {@desc.requestTypeName} injectToken({@desc.requestTypeName} payload, Object token) {
            return {@desc.requestTypeName}
              .newBuilder(payload)
              .{@desc.fnSetRequestToken}(({@desc.tokenTypeName}) token)
              .build();
          }
          @@Override
          public Object extractNextToken({@desc.responseTypeName} payload) {
            return payload.{@desc.fnGetResponseToken}();
          }
          @@Override
          public Iterable<{@desc.resourceTypeName}> extractResources({@desc.responseTypeName} payload) {
            return payload.{@desc.fnGetResourcesField}();
          }
        };
    {@""}
  @end
@end

@private bundlingDescriptors(xsettingsClass)
  @join desc : xsettingsClass.bundlingDescriptors
    private static BundlingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}> {@desc.name} =
        new BundlingDescriptor<{@desc.requestTypeName}, {@desc.responseTypeName}>() {
          @@Override
          public String getBundlePartitionKey({@desc.requestTypeName} request) {
            return {@partitionKeyCode(desc)};
          }

          @@Override
          public {@desc.requestTypeName} mergeRequests(Collection<{@desc.requestTypeName}> requests) {
            {@desc.requestTypeName} firstRequest = requests.iterator().next();

            {@desc.bundledFieldTypeName} elements = new ArrayList<>();
            for ({@desc.requestTypeName} request : requests) {
              elements.addAll(request.{@desc.fnGetBundledField}());
            }

            {@desc.requestTypeName} bundleRequest =
                {@desc.requestTypeName}.newBuilder()
                    {@fieldCopyCalls(desc.discriminatorFieldCopies)}
                    .{@desc.fnSetBundledField}(elements)
                    .build();
            return bundleRequest;
          }

          @@Override
          public void splitResponse(
              {@desc.responseTypeName} bundleResponse,
              Collection<? extends RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}>> bundle) {
            # TODO(garrettjones) support case of no subresponse_field (e.g. Logging)
            int bundleMessageIndex = 0;
            for (RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}> responder : bundle) {
              {@desc.subresponseTypeName} subresponseElements = new ArrayList<>();
              int subresponseCount = responder.getRequest().{@desc.fnGetBundledFieldCount}();
              for (int i = 0; i < subresponseCount; i++) {
                subresponseElements.add(bundleResponse.{@desc.fnGetSubresponseByIndex}(bundleMessageIndex));
                bundleMessageIndex += 1;
              }
              {@desc.responseTypeName} response =
                  {@desc.responseTypeName}.newBuilder().{@desc.fnSetSubresponse}(subresponseElements).build();
              responder.setResponse(response);
            }
          }

          @@Override
          public void splitException(
              Throwable throwable,
              Collection<? extends RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}>> bundle) {
            for (RequestIssuer<{@desc.requestTypeName}, {@desc.responseTypeName}> responder : bundle) {
              responder.setException(throwable);
            }
          }

          @@Override
          public long countElements({@desc.requestTypeName} request) {
            return request.{@desc.fnGetBundledFieldCount}();
          }

          @@Override
          public long countBytes({@desc.requestTypeName} request) {
            return request.getSerializedSize();
          }
        };
    {@""}
  @end
@end

@private partitionKeyCode(bundlingDesc)
  @join partitionKey : bundlingDesc.partitionKeys on " + "
    request.{@partitionKey.fnGetCallName}() + {@partitionKey.separatorLiteral}
  @end
@end

@private fieldCopyCalls(fieldCopies)
  @join fieldCopy : fieldCopies
    .{@fieldCopy.fnSetFunctionCallName}(firstRequest.{@fieldCopy.fnGetFunctionCallName}())
  @end
@end
