============== file: src/LibraryServiceApi.php ==============
<?php

namespace Google\Example\Library\V1;

use Google\GAX\AgentHeaderDescriptor;
use Google\GAX\ApiCallable;
use Google\GAX\CallSettings;
use Google\GAX\GrpcBootstrap;
use Google\GAX\GrpcConstants;
use Google\GAX\PageStreamingDescriptor;
use Google\GAX\PathTemplate;
use google\example\library\v1\LibraryServiceClient;

class LibraryServiceApi
{
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    const _GAX_VERSION = '0.1.0';
    const _CODEGEN_NAME = 'GAPIC';
    const _CODEGEN_VERSION = '0.0.0';

    private static $shelfNameTemplate;
    private static $bookNameTemplate;
    private static $archivedBookNameTemplate;

    private $grpcBootstrap;
    private $stub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;

    /**
     * Formats a string containing the fully-qualified path to represent
     * a shelf resource.
     */
    public static function formatShelfName($shelf)
    {
        return self::getShelfNameTemplate()->render([
            'shelf' => $shelf,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a book resource.
     */
    public static function formatBookName($shelf, $book)
    {
        return self::getBookNameTemplate()->render([
            'shelf' => $shelf,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a archived_book resource.
     */
    public static function formatArchivedBookName($archivePath, $book)
    {
        return self::getArchivedBookNameTemplate()->render([
            'archive_path' => $archivePath,
            'book' => $book,
        ]);
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a shelf resource.
     */
    public static function parseShelfFromShelfName($shelfName)
    {
        return self::getShelfNameTemplate()->match($shelfName)['shelf'];
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseShelfFromBookName($bookName)
    {
        return self::getBookNameTemplate()->match($bookName)['shelf'];
    }

    /**
     * Parses the book from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseBookFromBookName($bookName)
    {
        return self::getBookNameTemplate()->match($bookName)['book'];
    }

    /**
     * Parses the archive_path from the given fully-qualified path which
     * represents a archivedBook resource.
     */
    public static function parseArchivePathFromArchivedBookName($archivedBookName)
    {
        return self::getArchivedBookNameTemplate()->match($archivedBookName)['archive_path'];
    }

    /**
     * Parses the book from the given fully-qualified path which
     * represents a archivedBook resource.
     */
    public static function parseBookFromArchivedBookName($archivedBookName)
    {
        return self::getArchivedBookNameTemplate()->match($archivedBookName)['book'];
    }


    private static function getShelfNameTemplate()
    {
        if (self::$shelfNameTemplate == null) {
            self::$shelfNameTemplate = new PathTemplate('shelves/{shelf}');
        }

        return self::$shelfNameTemplate;
    }

    private static function getBookNameTemplate()
    {
        if (self::$bookNameTemplate == null) {
            self::$bookNameTemplate = new PathTemplate('shelves/{shelf}/books/{book}');
        }

        return self::$bookNameTemplate;
    }

    private static function getArchivedBookNameTemplate()
    {
        if (self::$archivedBookNameTemplate == null) {
            self::$archivedBookNameTemplate = new PathTemplate('archives/{archive_path=**}/books/{book}');
        }

        return self::$archivedBookNameTemplate;
    }


    private static function getPageStreamingDescriptors()
    {
        $listShelvesPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'shelves',
                ]);
        $listBooksPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'books',
                ]);
        $listStringsPageStreamingDescriptor =
                new PageStreamingDescriptor([
                    'requestPageTokenField' => 'page_token',
                    'responsePageTokenField' => 'next_page_token',
                    'resourceField' => 'strings',
                ]);

        $pageStreamingDescriptors = [
            'listShelves' => $listShelvesPageStreamingDescriptor,
            'listBooks' => $listBooksPageStreamingDescriptor,
            'listStrings' => $listStringsPageStreamingDescriptor,
        ];

        return $pageStreamingDescriptors;
    }

    // TODO(garrettjones): add channel (when supported in gRPC)
    /**
     * Constructor.
     *
     * @param array $options {
     *     Optional. Options for configuring the service API wrapper.
     *
     *     @var string $serviceAddress The domain name of the API remote host.
     *                                  Default 'library-example.googleapis.com'.
     *     @var mixed $port The port on which to connect to the remote host. Default 443.
     *     @var Grpc\ChannelCredentials $sslCreds
     *           A `ChannelCredentials` for use with an SSL-enabled channel.
     *           Default: a credentials object returned from
     *           Grpc\ChannelCredentials::createSsl()
     *     @var array $scopes A string array of scopes to use when acquiring credentials.
     *                         Default the scopes for the Google Example Library API.
     *     @var array $retryingOverride
     *           An associative array of string => RetryOptions, where the keys
     *           are method names (e.g. 'createFoo'), that overrides default retrying
     *           settings. A value of null indicates that the method in question should
     *           not retry.
     *     @var int $timeoutMillis The timeout in milliseconds to use for calls
     *                              that don't use retries. For calls that use retries,
     *                              set the timeout in RetryOptions.
     *                              Default: 30000 (30 seconds)
     *     @var string $appName The codename of the calling service. Default 'gax'.
     *     @var string $appVersion The version of the calling service.
     *                              Default: the current version of GAX.
     * }
     */
    public function __construct($options = [])
    {
        $defaultScopes = [
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/library',
        ];
        $defaultOptions = [
            'serviceAddress' => self::SERVICE_ADDRESS,
            'port' => self::DEFAULT_SERVICE_PORT,
            'scopes' => $defaultScopes,
            'retryingOverride' => null,
            'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
            'appName' => 'gax',
            'appVersion' => self::_GAX_VERSION,
        ];
        $options = array_merge($defaultOptions, $options);

        $headerDescriptor = new AgentHeaderDescriptor([
            'clientName' => $options['appName'],
            'clientVersion' => $options['appVersion'],
            'codeGenName' => self::_CODEGEN_NAME,
            'codeGenVersion' => self::_CODEGEN_VERSION,
            'gaxVersion' => self::_GAX_VERSION,
            'phpVersion' => phpversion(),
        ]);

        $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
        $this->descriptors = [
            'createShelf' => $defaultDescriptors,
            'getShelf' => $defaultDescriptors,
            'listShelves' => $defaultDescriptors,
            'deleteShelf' => $defaultDescriptors,
            'mergeShelves' => $defaultDescriptors,
            'createBook' => $defaultDescriptors,
            'publishSeries' => $defaultDescriptors,
            'getBook' => $defaultDescriptors,
            'listBooks' => $defaultDescriptors,
            'deleteBook' => $defaultDescriptors,
            'updateBook' => $defaultDescriptors,
            'moveBook' => $defaultDescriptors,
            'listStrings' => $defaultDescriptors,
            'addComments' => $defaultDescriptors,
            'getBookFromArchive' => $defaultDescriptors,
            'updateBookIndex' => $defaultDescriptors,
        ];
        $pageStreamingDescriptors = self::getPageStreamingDescriptors();
        foreach ($pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
            $this->descriptors[$method]['pageStreamingDescriptor'] = $pageStreamingDescriptor;
        }

        // TODO load the client config in a more package-friendly way
        $clientConfigJsonString = file_get_contents('./resources/library_service_client_config.json');
        $clientConfig = json_decode($clientConfigJsonString, true);
        $this->defaultCallSettings =
                CallSettings::load('google.example.library.v1.LibraryService',
                                   $clientConfig,
                                   $options['retryingOverride'],
                                   GrpcConstants::getStatusCodeNames(),
                                   $options['timeoutMillis']);

        $this->scopes = $options['scopes'];

        $generatedCreateStub = function ($hostname, $opts) {
            return new LibraryServiceClient($hostname, $opts);
        };
        $createStubOptions = [];
        if (!empty($options['sslCreds'])) {
            $createStubOptions['sslCreds'] = $options['sslCreds'];
        }
        $this->grpcBootstrap = GrpcBootstrap::defaultInstance();
        $this->stub = $this->grpcBootstrap->createStub(
            $generatedCreateStub,
            $options['serviceAddress'],
            $options['port'],
            $createStubOptions);
    }

}
