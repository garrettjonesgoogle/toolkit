============== file: src/LibraryServiceApi.php ==============
<?php

namespace Google\Example\Library\V1;

use Google\GAX\AgentHeaderDescriptor;
use Google\GAX\ApiCallable;
use Google\GAX\CallSettings;
use Google\GAX\GrpcBootstrap;
use Google\GAX\GrpcConstants;
use Google\GAX\PathTemplate;

class LibraryServiceApi
{
    /**
     * The default address of the service.
     */
    const SERVICE_ADDRESS = 'library-example.googleapis.com';

    /**
     * The default port of the service.
     */
    const DEFAULT_SERVICE_PORT = 443;

    /**
     * The default timeout for non-retrying methods.
     */
    const DEFAULT_TIMEOUT_MILLIS = 30000;

    const _GAX_VERSION = '0.1.0';
    const _CODEGEN_NAME = 'GAPIC';
    const _CODEGEN_VERSION = '0.0.0';

    private static $shelfNameTemplate;
    private static $bookNameTemplate;
    private static $archivedBookNameTemplate;

    private $grpcBootstrap;
    private $stub;
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;

    /**
     * Formats a string containing the fully-qualified path to represent
     * a shelf resource.
     */
    public static function formatShelfName($shelf)
    {
        return self::getShelfNameTemplate()->render([
            'shelf' => $shelf,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a book resource.
     */
    public static function formatBookName($shelf, $book)
    {
        return self::getBookNameTemplate()->render([
            'shelf' => $shelf,
            'book' => $book,
        ]);
    }

    /**
     * Formats a string containing the fully-qualified path to represent
     * a archived_book resource.
     */
    public static function formatArchivedBookName($archivePath, $book)
    {
        return self::getArchivedBookNameTemplate()->render([
            'archive_path' => $archivePath,
            'book' => $book,
        ]);
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a shelf resource.
     */
    public static function parseShelfFromShelfName($shelfName)
    {
        return self::getShelfNameTemplate()->match($shelfName)['shelf'];
    }

    /**
     * Parses the shelf from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseShelfFromBookName($bookName)
    {
        return self::getBookNameTemplate()->match($bookName)['shelf'];
    }

    /**
     * Parses the book from the given fully-qualified path which
     * represents a book resource.
     */
    public static function parseBookFromBookName($bookName)
    {
        return self::getBookNameTemplate()->match($bookName)['book'];
    }

    /**
     * Parses the archive_path from the given fully-qualified path which
     * represents a archivedBook resource.
     */
    public static function parseArchivePathFromArchivedBookName($archivedBookName)
    {
        return self::getArchivedBookNameTemplate()->match($archivedBookName)['archive_path'];
    }

    /**
     * Parses the book from the given fully-qualified path which
     * represents a archivedBook resource.
     */
    public static function parseBookFromArchivedBookName($archivedBookName)
    {
        return self::getArchivedBookNameTemplate()->match($archivedBookName)['book'];
    }


    private static function getShelfNameTemplate()
    {
        if (self::$shelfNameTemplate == null) {
            self::$shelfNameTemplate = new PathTemplate('shelves/{shelf}');
        }

        return self::$shelfNameTemplate;
    }

    private static function getBookNameTemplate()
    {
        if (self::$bookNameTemplate == null) {
            self::$bookNameTemplate = new PathTemplate('shelves/{shelf}/books/{book}');
        }

        return self::$bookNameTemplate;
    }

    private static function getArchivedBookNameTemplate()
    {
        if (self::$archivedBookNameTemplate == null) {
            self::$archivedBookNameTemplate = new PathTemplate('archives/{archive_path=**}/books/{book}');
        }

        return self::$archivedBookNameTemplate;
    }

}
