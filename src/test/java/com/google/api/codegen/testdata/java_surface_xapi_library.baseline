============== file: src/main/java/com/google/gcloud/pubsub/spi/LibraryServiceApi.java ==============
package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.PageAccessor;
import com.google.api.gax.grpc.ApiCallable;
import com.google.api.gax.protobuf.PathTemplate;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.Empty;
import io.grpc.ManagedChannel;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;

@javax.annotation.Generated("by GAPIC")
public class LibraryServiceApi implements AutoCloseable {
  private final LibraryServiceSettings settings;
  private final ManagedChannel channel;
  private final ScheduledExecutorService executor;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  private final ApiCallable<CreateShelfRequest, Shelf> createShelfCallable;
  private final ApiCallable<GetShelfRequest, Shelf> getShelfCallable;
  private final ApiCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable;
  private final ApiCallable<ListShelvesRequest, PageAccessor<Shelf>> listShelvesPagedCallable;
  private final ApiCallable<DeleteShelfRequest, Empty> deleteShelfCallable;
  private final ApiCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable;
  private final ApiCallable<CreateBookRequest, Book> createBookCallable;
  private final ApiCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable;
  private final ApiCallable<GetBookRequest, Book> getBookCallable;
  private final ApiCallable<ListBooksRequest, ListBooksResponse> listBooksCallable;
  private final ApiCallable<ListBooksRequest, PageAccessor<Book>> listBooksPagedCallable;
  private final ApiCallable<DeleteBookRequest, Empty> deleteBookCallable;
  private final ApiCallable<UpdateBookRequest, Book> updateBookCallable;
  private final ApiCallable<MoveBookRequest, Book> moveBookCallable;
  private final ApiCallable<ListStringsRequest, ListStringsResponse> listStringsCallable;
  private final ApiCallable<ListStringsRequest, PageAccessor<String>> listStringsPagedCallable;
  private final ApiCallable<AddCommentsRequest, Empty> addCommentsCallable;
  private final ApiCallable<GetBookFromArchiveRequest, Book> getBookFromArchiveCallable;

  public final LibraryServiceSettings getSettings() {
    return settings;
  }

  private static final PathTemplate SHELF_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}");

  private static final PathTemplate BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}/books/{book}");

  private static final PathTemplate ARCHIVED_BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("archives/{archive_path=**}/books/{book}");

  /**
   * Formats a string containing the fully-qualified path to represent
   * a shelf resource.
   */
  public static final String formatShelfName(String shelf) {
    return SHELF_PATH_TEMPLATE.instantiate(
        "shelf", shelf);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a book resource.
   */
  public static final String formatBookName(String shelf, String book) {
    return BOOK_PATH_TEMPLATE.instantiate(
        "shelf", shelf,
        "book", book);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a archived_book resource.
   */
  public static final String formatArchivedBookName(String archivePath, String book) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.instantiate(
        "archive_path", archivePath,
        "book", book);
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a shelf resource.
   */
  public static final String parseShelfFromShelfName(String shelfName) {
    return SHELF_PATH_TEMPLATE.parse(shelfName).get("shelf");
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a book resource.
   */
  public static final String parseShelfFromBookName(String bookName) {
    return BOOK_PATH_TEMPLATE.parse(bookName).get("shelf");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a book resource.
   */
  public static final String parseBookFromBookName(String bookName) {
    return BOOK_PATH_TEMPLATE.parse(bookName).get("book");
  }

  /**
   * Parses the archive_path from the given fully-qualified path which
   * represents a archivedBook resource.
   */
  public static final String parseArchivePathFromArchivedBookName(String archivedBookName) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.parse(archivedBookName).get("archive_path");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a archivedBook resource.
   */
  public static final String parseBookFromArchivedBookName(String archivedBookName) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.parse(archivedBookName).get("book");
  }

}
