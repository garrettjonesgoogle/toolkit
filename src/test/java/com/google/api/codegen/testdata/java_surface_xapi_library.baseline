============== file: src/main/java/com/google/gcloud/pubsub/spi/LibraryServiceApi.java ==============
package com.google.gcloud.pubsub.spi;

import com.google.api.gax.core.PageAccessor;
import com.google.api.gax.grpc.ApiCallable;
import com.google.api.gax.protobuf.PathTemplate;
import com.google.example.library.v1.AddCommentsRequest;
import com.google.example.library.v1.Book;
import com.google.example.library.v1.CreateBookRequest;
import com.google.example.library.v1.CreateShelfRequest;
import com.google.example.library.v1.DeleteBookRequest;
import com.google.example.library.v1.DeleteShelfRequest;
import com.google.example.library.v1.GetBookFromArchiveRequest;
import com.google.example.library.v1.GetBookRequest;
import com.google.example.library.v1.GetShelfRequest;
import com.google.example.library.v1.ListBooksRequest;
import com.google.example.library.v1.ListBooksResponse;
import com.google.example.library.v1.ListShelvesRequest;
import com.google.example.library.v1.ListShelvesResponse;
import com.google.example.library.v1.ListStringsRequest;
import com.google.example.library.v1.ListStringsResponse;
import com.google.example.library.v1.MergeShelvesRequest;
import com.google.example.library.v1.MoveBookRequest;
import com.google.example.library.v1.PublishSeriesRequest;
import com.google.example.library.v1.PublishSeriesResponse;
import com.google.example.library.v1.Shelf;
import com.google.example.library.v1.UpdateBookIndexRequest;
import com.google.example.library.v1.UpdateBookRequest;
import com.google.protobuf.Empty;
import io.grpc.ManagedChannel;
import java.io.Closeable;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ScheduledExecutorService;

@javax.annotation.Generated("by GAPIC")
public class LibraryServiceApi implements AutoCloseable {
  private final LibraryServiceSettings settings;
  private final ManagedChannel channel;
  private final ScheduledExecutorService executor;
  private final List<AutoCloseable> closeables = new ArrayList<>();

  private final ApiCallable<CreateShelfRequest, Shelf> createShelfCallable;
  private final ApiCallable<GetShelfRequest, Shelf> getShelfCallable;
  private final ApiCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable;
  private final ApiCallable<ListShelvesRequest, PageAccessor<Shelf>> listShelvesPagedCallable;
  private final ApiCallable<DeleteShelfRequest, Empty> deleteShelfCallable;
  private final ApiCallable<MergeShelvesRequest, Shelf> mergeShelvesCallable;
  private final ApiCallable<CreateBookRequest, Book> createBookCallable;
  private final ApiCallable<PublishSeriesRequest, PublishSeriesResponse> publishSeriesCallable;
  private final ApiCallable<GetBookRequest, Book> getBookCallable;
  private final ApiCallable<ListBooksRequest, ListBooksResponse> listBooksCallable;
  private final ApiCallable<ListBooksRequest, PageAccessor<Book>> listBooksPagedCallable;
  private final ApiCallable<DeleteBookRequest, Empty> deleteBookCallable;
  private final ApiCallable<UpdateBookRequest, Book> updateBookCallable;
  private final ApiCallable<MoveBookRequest, Book> moveBookCallable;
  private final ApiCallable<ListStringsRequest, ListStringsResponse> listStringsCallable;
  private final ApiCallable<ListStringsRequest, PageAccessor<String>> listStringsPagedCallable;
  private final ApiCallable<AddCommentsRequest, Empty> addCommentsCallable;
  private final ApiCallable<GetBookFromArchiveRequest, Book> getBookFromArchiveCallable;
  private final ApiCallable<UpdateBookIndexRequest, Empty> updateBookIndexCallable;

  public final LibraryServiceSettings getSettings() {
    return settings;
  }

  private static final PathTemplate SHELF_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}");

  private static final PathTemplate BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("shelves/{shelf}/books/{book}");

  private static final PathTemplate ARCHIVED_BOOK_PATH_TEMPLATE =
      PathTemplate.createWithoutUrlEncoding("archives/{archive_path=**}/books/{book}");

  /**
   * Formats a string containing the fully-qualified path to represent
   * a shelf resource.
   */
  public static final String formatShelfName(String shelf) {
    return SHELF_PATH_TEMPLATE.instantiate(
        "shelf", shelf);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a book resource.
   */
  public static final String formatBookName(String shelf, String book) {
    return BOOK_PATH_TEMPLATE.instantiate(
        "shelf", shelf,
        "book", book);
  }

  /**
   * Formats a string containing the fully-qualified path to represent
   * a archived_book resource.
   */
  public static final String formatArchivedBookName(String archivePath, String book) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.instantiate(
        "archive_path", archivePath,
        "book", book);
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a shelf resource.
   */
  public static final String parseShelfFromShelfName(String shelfName) {
    return SHELF_PATH_TEMPLATE.parse(shelfName).get("shelf");
  }

  /**
   * Parses the shelf from the given fully-qualified path which
   * represents a book resource.
   */
  public static final String parseShelfFromBookName(String bookName) {
    return BOOK_PATH_TEMPLATE.parse(bookName).get("shelf");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a book resource.
   */
  public static final String parseBookFromBookName(String bookName) {
    return BOOK_PATH_TEMPLATE.parse(bookName).get("book");
  }

  /**
   * Parses the archive_path from the given fully-qualified path which
   * represents a archivedBook resource.
   */
  public static final String parseArchivePathFromArchivedBookName(String archivedBookName) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.parse(archivedBookName).get("archive_path");
  }

  /**
   * Parses the book from the given fully-qualified path which
   * represents a archivedBook resource.
   */
  public static final String parseBookFromArchivedBookName(String archivedBookName) {
    return ARCHIVED_BOOK_PATH_TEMPLATE.parse(archivedBookName).get("book");
  }

  /**
   * Constructs an instance of LibraryServiceApi with default settings.
   */
  public static final LibraryServiceApi createWithDefaults() throws IOException {
    return create(LibraryServiceSettings.defaultBuilder().build());
  }

  /**
   * Constructs an instance of LibraryServiceApi, using the given settings.
   * The channels are created based on the settings passed in, or defaults for any
   * settings that are not set.
   */
  public static final LibraryServiceApi create(LibraryServiceSettings settings) throws IOException {
    return new LibraryServiceApi(settings);
  }

  /**
   * Constructs an instance of LibraryServiceApi, using the given settings.
   * This is protected so that it easy to make a subclass, but otherwise, the static
   * factory methods should be preferred.
   */
  protected LibraryServiceApi(LibraryServiceSettings settings) throws IOException {
    this.settings = settings;
    this.executor = settings.getExecutorProvider().getOrBuildExecutor();
    this.channel = settings.getChannelProvider().getOrBuildChannel(this.executor);

    this.createShelfCallable = ApiCallable.create(settings.createShelfSettings(), this.channel, this.executor);
    this.getShelfCallable = ApiCallable.create(settings.getShelfSettings(), this.channel, this.executor);
    this.listShelvesCallable = ApiCallable.create(settings.listShelvesSettings(), this.channel, this.executor);
    this.listShelvesPagedCallable =
        ApiCallable.createPagedVariant(settings.listShelvesSettings(), this.channel, this.executor);
    this.deleteShelfCallable = ApiCallable.create(settings.deleteShelfSettings(), this.channel, this.executor);
    this.mergeShelvesCallable = ApiCallable.create(settings.mergeShelvesSettings(), this.channel, this.executor);
    this.createBookCallable = ApiCallable.create(settings.createBookSettings(), this.channel, this.executor);
    this.publishSeriesCallable = ApiCallable.create(settings.publishSeriesSettings(), this.channel, this.executor);
    if (settings.publishSeriesSettings().getBundlerFactory() != null) {
      closeables.add(settings.publishSeriesSettings().getBundlerFactory());
    }
    this.getBookCallable = ApiCallable.create(settings.getBookSettings(), this.channel, this.executor);
    this.listBooksCallable = ApiCallable.create(settings.listBooksSettings(), this.channel, this.executor);
    this.listBooksPagedCallable =
        ApiCallable.createPagedVariant(settings.listBooksSettings(), this.channel, this.executor);
    this.deleteBookCallable = ApiCallable.create(settings.deleteBookSettings(), this.channel, this.executor);
    this.updateBookCallable = ApiCallable.create(settings.updateBookSettings(), this.channel, this.executor);
    this.moveBookCallable = ApiCallable.create(settings.moveBookSettings(), this.channel, this.executor);
    this.listStringsCallable = ApiCallable.create(settings.listStringsSettings(), this.channel, this.executor);
    this.listStringsPagedCallable =
        ApiCallable.createPagedVariant(settings.listStringsSettings(), this.channel, this.executor);
    this.addCommentsCallable = ApiCallable.create(settings.addCommentsSettings(), this.channel, this.executor);
    this.getBookFromArchiveCallable = ApiCallable.create(settings.getBookFromArchiveSettings(), this.channel, this.executor);
    this.updateBookIndexCallable = ApiCallable.create(settings.updateBookIndexSettings(), this.channel, this.executor);

    if (settings.getChannelProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @Override
          public void close() throws IOException {
            channel.shutdown();
          }
        });
    }
    if (settings.getExecutorProvider().shouldAutoClose()) {
      closeables.add(
        new Closeable() {
          @Override
          public void close() throws IOException {
            executor.shutdown();
          }
        });
    }
  }

















  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceApi libraryServiceApi = LibraryServiceApi.createWithDefaults()) {
   *
   *   for (Shelf element : libraryServiceApi.listShelves()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final PageAccessor<Shelf> listShelves() {
    ListShelvesRequest request =
        ListShelvesRequest.newBuilder()

        .build();
    return listShelves(request);
  }

  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   *
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */

  private final PageAccessor<Shelf> listShelves(ListShelvesRequest request) {
    return listShelvesPagedCallable()
        .call(request);
  }

  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   */

  public final ApiCallable<ListShelvesRequest, PageAccessor<Shelf>> listShelvesPagedCallable() {
    return listShelvesPagedCallable;
  }

  /**
   * Lists shelves.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   */

  public final ApiCallable<ListShelvesRequest, ListShelvesResponse> listShelvesCallable() {
    return listShelvesCallable;
  }































  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceApi libraryServiceApi = LibraryServiceApi.createWithDefaults()) {
   *   String formattedName = LibraryServiceApi.formatShelfName(["[SHELF]"]);
   *   String filter = "";
   *   for (Book element : libraryServiceApi.listBooks(formattedName, filter)) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @param name The name of the shelf whose books we'd like to list.
   * @param filter To test python built-in wrapping.
   *
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final PageAccessor<Book> listBooks(String name, String filter) {
    SHELF_PATH_TEMPLATE.validate(name);
    ListBooksRequest request =
        ListBooksRequest.newBuilder()
        .setName(name)
        .setFilter(filter)
        .build();
    return listBooks(request);
  }

  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   *
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */

  public final PageAccessor<Book> listBooks(ListBooksRequest request) {
    return listBooksPagedCallable()
        .call(request);
  }

  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   */

  public final ApiCallable<ListBooksRequest, PageAccessor<Book>> listBooksPagedCallable() {
    return listBooksPagedCallable;
  }

  /**
   * Lists books in a shelf.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   */

  public final ApiCallable<ListBooksRequest, ListBooksResponse> listBooksCallable() {
    return listBooksCallable;
  }





















  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   * try (LibraryServiceApi libraryServiceApi = LibraryServiceApi.createWithDefaults()) {
   *
   *   for (String element : libraryServiceApi.listStrings()) {
   *     // doThingsWith(element);
   *   }
   * }
   * </code></pre>
   *
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */
  public final PageAccessor<String> listStrings() {
    ListStringsRequest request =
        ListStringsRequest.newBuilder()

        .build();
    return listStrings(request);
  }

  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   *
   * @param request The request object containing all of the parameters for the API call.
   *
   * @throws com.google.api.gax.grpc.ApiException if the remote call fails
   */

  private final PageAccessor<String> listStrings(ListStringsRequest request) {
    return listStringsPagedCallable()
        .call(request);
  }

  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   */

  public final ApiCallable<ListStringsRequest, PageAccessor<String>> listStringsPagedCallable() {
    return listStringsPagedCallable;
  }

  /**
   * Lists a primitive resource. To test go page streaming.
   *
   * Sample code:
   * <pre><code>
   *
   * </code></pre>
   */

  public final ApiCallable<ListStringsRequest, ListStringsResponse> listStringsCallable() {
    return listStringsCallable;
  }



















}
